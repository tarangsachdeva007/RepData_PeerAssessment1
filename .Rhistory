swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
inside. names(plants)
inside.names(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = F)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
?LETTERS
Letters()
LETTERS()
LETTERS
sample(LETTERS)
flips<- sample(c(0.3, 0.7), 100)
flips<- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<- rbinom(1, size = 100, prob = 0.7)
flips2<- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(1,5,mean=10)
?rpois
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm<- colMeans( my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=speed, y= dist)
plot(x= speed, y= dist)
ls()
plot(x= cars$speed, y= cars$dist)
plot(y= cars$dist, x= cars$speed)
plot(x= cars$dist, y= cars$speed)
plot(x= cars$speed, y= cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "dist")
Type plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col=2)
plot(cars, xlim = c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg ~ cy, mtcars)
boxplot(mpg ~ cy)
boxplot(mpg ~ cy, data = mtcars)
boxplot(mpg~cy, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
file<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
k<- download.file(file, destfile = data)
?download.file
k<- download.file(file, destfile = "getwd()", method = "curl")
k
k
k<- read.csv("k")
k<- read.csv(k)
read.csv("data")
read.csv("data.csv")
read.csv("getwd().csv")
read.csv("getwd()")
k$VAL
k<- read.csv("getwd()")
k$VAL
bad<- is.na(k$VAL)
k<- !bad
k
k[!bad]
t<- k{!bad}
t<- k[!bad]
length(t>13)
t
length(k[!bad]>13)
k$VAL[!is.na(k$VAL)]>13
t<- complete.cases(k$VAL)
k<- read.csv("getwd()")
t<- k[complete.cases(k$VAL), ]
t$VAL
length(t$VAL>13)
is(t$VAL>=13)
m<- is(t$VAL>=13)
m
m<- t[t$VAL>=13, ]
m
nrow(m)
install.packages(xlconnect)
install.packages("XLConnect")
library(XLConnect)
library(XLConnect)
detach("package:XLConnect", unload = TRUE)
library(XLConnect)
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
file<- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "getwd()")
k<- read.csv("getwd()")
k
detach("package:XLConnect", unload = TRUE)
library(XLConnect)
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
sumary(ppm)
summary(ppm)
quantile(ppm)
boxplot(ppm, col= "blue")
abline(h=12)
hist(ppm, col= "green")
rug(ppm)
low
13
12
14
high
hist(ppm, col="green", break= 100)
hist(ppm, col= "green", breaks= 100)
rug(ppm)
hist(ppm, col= "green")
abloine(h= 12)
abline(h= 12)
abline(v = 12, lwd=2)
abline(v = 12, lwd=4)
abline(v = median(ppm), lwd=4)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col= "wheat", main = "Number of Counties in Each Region")
boxplot(ppm~region, data= pollution, col= "red")
par(mfrow=c(2,1)
)
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
subset(pollution, region=="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$ppm, col= "green")
hist(east$pp25, col= "green")
hist(east, col= "green")
hist(east$pm25, col= "green")
west<- pollution[ ,region== "west"]
west<- subset(pollution,region== "west")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(pm25,latitude))
with(pollution, plot(latitude, pm25))
abline(h=12, lwd= 12, lty= 2)
abline(h=12, lwd= 12, lty= 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col= pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<- subset(pollution, region = "west")
west <- subset(pollution,region=="west")
plot(x= west$latitude, y= west$pm25, main= "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file= "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist
)
ssx
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data= state, layout= c(4,1))
xyplot(Life.Exp ~ Income | region, data= state, layout= c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot(displ, hwy, data= mpg)
qplot(displ, hwy, data= mpg)
head(airquality)
range(airquality$Ozone, na.rm= TRUE)
hist(airquality$Ozone)
dev.cur()
set.dev(2)
dev.set(2)
dev.off()
table(airquality$Month)\
table(airquality$Month)
boxplot(ozone~Month, airquality)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab= "Month", ylab = "Ozone (ppb)", col.axis= "Blue", col.lab= "Red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Month, Ozone))
with(airquality, plot(Wind, Ozone))
title(main= "Ozone and Wind in New York City")
mength(par())
length(par())
par()
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type= "n")
title(main= "Wind and Ozone in NYC")
may<- airwuality[ ,airquality$Month==5]
may<- airquality[ ,airquality$Month==5]
subset[airquality,airquality$Month== 5 ]
?subset
subset[airquality,Month== 5 ]
may<- subset[airquality, Month == 5 ]
may<- subset[airquality, month == 5 ]
may<- subset[airquality, months== 5 ]
head(airquality)
may<- subset[airquality, Month== 5 ]
may<- subset[airquality, Month=5 ]
may <- subset(airquality,Month==5)
points(may$Wind,may$Ozone,col=”blue”,pch=17)
plot(may$Wind,may$Ozone,col=”blue”,pch=17)
points(may$Wind,may$Ozone,col=”blue”,pch=17)
points(may$Wind,may$Ozone,col=”blue”,pch=17)
point(may$Wind,may$Ozone,col=”blue”,pch=17)
points(may$Wind,may$Ozone,col=”Blue”,pch=17)
may <- subset(airquality,Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col=”red”,pch=8)
notmay <- subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch=c(17,8),col=c(“blue”,”red”),legend=c(“May”,”Other Months”))
legend("topright", pch=c(17,8),col=c(“blue”,”red”),legend=c(“May”,”Other Months”))
notmay <- subset(airquality,Month!=5)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(median(airquality$wind, lty=2, lwd=2))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main=”Ozone an Wind”)
plot(airquality$Wind,airquality$Ozone,main=”Ozone and Wind”)
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
install.packages("swirl")
library(swirl)
swirl()
str(mpg)
qplot(mpg$displ, mpg$hwy, data = mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv
)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth")
)
qplot(y= hwy, data = mpg, color = drv)
myhigh
g
qplot(y= hwy, data = mpg, color = drv)
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot", color = manufacturer)
qplot(drv,hwy,data=mpg,geom="boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g <- ggplot(mpg, aes(displ,hwy) )
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(methord= "lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(._drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.*drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Wules!")
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
at the command prompt.
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(color="pink",size=4,alpha=1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
+ geom_point(aes(color = drv)) + theme_bw(base_family="Times")
+ geom_point(aes(color = drv)) + theme_bw(base_family="Times")
g+ geom_point(aes(color = drv)) + theme_bw(base_family="Times")
g+ geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_line()
g+geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_line()
g + geom_point()
g + geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() +
facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price, data= diamonds)
range(diamonds$price)
qplot(price, data= diamonds, bindwidth = 18497/30)
(price,data=diamonds,binwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30, fill= cut)
qplot(price,data=diamonds,geom = density)
qplot(price,data=diamonds,geom = "density")
qplot(price,data=diamonds,geom = "density", color = cut)
qplot(carat, price, data= diamonds)
qplot(carat, price, data= diamonds, shape=cut)
qplot(carat, price, data= diamonds, colorConverter=cut)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut, geom_smooth(method = "lm"))
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds,aes(depth,price))
summary(g)
summary(g)
g+geom_point(alpha=1/3)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(diamonds,aes(depth,price))
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
gplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
setwd("~/GitHub/RepData_PeerAssessment1")
k<- read.csv("~/activity/activity.csv")
k<- read.csv("activity.csv")
head(k)
k1<- aggregate(steps~date, data = k, sum)
k1
hist(x=steps, y= date, data= k1)
hist(x=steps, y= date, data= k1)
plot(x=steps, y= date, data= k1)
plot(x= steps, y= date, data= k1)
plot(k1$steps)
hist(k1$steps)
hist(k1$steps, k1$date)
plot(k1$steps,k1$date)
k1<- aggregate(steps~date, data = k, mean)
k1<- aggregate(steps~date, data = k, sum)
k2<- aggregate(steps~date, data = k, mean)
k2
k3<- aggregate(steps~date, data = k, meadian)
hist(k1$steps, col = "green")
hist(k1$steps, col = "green", title = "Histogram of steps taken")
hist(k1$steps, col = "green", title = "Histogram of steps taken")
k2<- aggregate(steps~date, data = k, mean)
summary(k1$steps)
##4
k2<-aggregare(steps~interval, data = k, sum)
##4
k2<-aggregate(steps~interval, data = k, sum)
k2
max(k2$steps)
which.max(k2$steps)
which.max(k)
which.max(k$steps)
which.max(k2$steps)
avg_steps_per_day <- aggregate(steps ~ date, k, mean)
avg_steps_per_day
plot(avg_steps_per_interval$interval, avg_steps_per_interval$steps, type='l', col=1, main="Average number of steps by Interval", xlab="Time Intervals", ylab="Average number of steps")
avg_steps_per_interval <- aggregate(steps ~ interval, k, mean)
avg_steps_per_day <- aggregate(steps ~ date, k, mean)
plot(avg_steps_per_interval$interval, avg_steps_per_interval$steps, type='l', col=1, main="Average number of steps by Interval", xlab="Time Intervals", ylab="Average number of steps")
##5
interval_idx <- which.max(avg_steps_per_interval$steps)
##5
interval_idx
##6
missing_value_act <- k[!complete.cases(k), ]
nrow(missing_value_act)
n<- nrows(k)
for( i=1:n){
if(k$steps[i]== NA){
val<- avg_steps_per_interval$steps[which(avg_steps_per_interval$interval == k$interval[i])]
newdata$steps[i] <- val
}
}
n<- nrows(k)
for( i in i=1:n){
if(k$steps[i]== NA){
val<- avg_steps_per_interval$steps[which(avg_steps_per_interval$interval == k$interval[i])]
newdata$steps[i] <- val
}
}
n<- nrow(k)
for( i in i=1:n){
if(k$steps[i]== NA){
val<- avg_steps_per_interval$steps[which(avg_steps_per_interval$interval == k$interval[i])]
newdata$steps[i] <- val
}
}
n<- nrow(k)
for(i in i=1:n){
if(k$steps[i]== NA){
val<- avg_steps_per_interval$steps[which(avg_steps_per_interval$interval == k$interval[i])]
newdata$steps[i] <- val
}
}
n<- nrow(k)
for(i in 1:n){
if(k$steps[i]== NA){
val<- avg_steps_per_interval$steps[which(avg_steps_per_interval$interval == k$interval[i])]
newdata$steps[i] <- val
}
}
n<- nrow(k)
for(i in 1:n){
if(is.na(activity$steps[i])){
val<- avg_steps_per_interval$steps[which(avg_steps_per_interval$interval == k$interval[i])]
newdata$steps[i] <- val
}
}
n<- nrow(k)
for(i in 1:n){
if(is.na(k$steps[i])){
val<- avg_steps_per_interval$steps[which(avg_steps_per_interval$interval == k$interval[i])]
newdata$steps[i] <- val
}
}
n<- nrow(k)
for(i in 1:n){
if(is.na(k$steps[i])){
val<- avg_steps_per_interval$steps[which(avg_steps_per_interval$interval == k$interval[i])]
k$steps[i] <- val
}
}
k
